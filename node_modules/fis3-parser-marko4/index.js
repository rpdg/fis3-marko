"use strict";
const fs = require("fs");
const path = require("path");
const marko = require("marko");
const util_1 = require("./util");
let isInited = false;
let needClean = false;
const deletedFileName = "/.deleted";
/**
 * 插件载入时的初始化
 * @param options 在fis-conf.json 定义的模板配置
 */
function initEngine(options) {
    fis.on("release:end", function () {
        let opt = fis.config.data.options;
        let dest;
        if (needClean && (dest = opt.d || opt.dest)) {
            fis.log.info("clean files...");
            setTimeout(function () {
                fs.unlink(path.join(process.cwd(), dest + deletedFileName), function (err) {
                    if (err)
                        fis.log.warn(err);
                    fis.log.info("clean success...");
                });
            }, 1000); //延时1秒清理
        }
        needClean = false;
    });
}
module.exports = function (content, file, options) {
    if (!content)
        return "";
    if (!file.isHtmlLike)
        return content;
    if (!isInited) {
        util_1.readGlobalData(options.define);
        delete options.define;
        initEngine(options);
        isInited = true;
    }
    let data = util_1.readConfig(file);
    if (data["$release"] === false) {
        //如果不release,将文件丢到.deleted,并添加clean标记,在release:end后清除
        needClean = true;
        file.release = deletedFileName;
        return "";
    }
    if (data["$noParse"] === true) {
        return content;
    }
    data = util_1.mergeGlobalData(file.subpath, data);
    // 加入内置的file变量
    data["$file"] = file;
    data['$media'] = fis.project.currentMedia();
    let template = marko.load(file.fullname, {
        writeToDisk: false
    });
    let str = template.renderToString(data);
    return str;
};
//# sourceMappingURL=index.js.map