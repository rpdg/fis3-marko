import * as fs from 'fs';
import * as path from 'path';

import * as marko from 'marko';

import Template from 'marko/src/runtime/html/Template';

import { readGlobalData, getGlobalData, readConfig, mergeGlobalData } from './util';

let isInited: boolean = false;
let needClean: boolean = false;
const deletedFileName: string = '/.deleted';

/**
 * 插件载入时的初始化
 * @param options 在fis-conf.json 定义的模板配置
 */
function initEngine(options: MarkoOption) {
	fis.on('release:end', function() {
		let opt = fis.config.data.options;
		let dest: string;

		if (needClean && (dest = opt.d || opt.dest)) {
			fis.log.info('clean files...');
			setTimeout(function() {
				fs.unlink(path.join(process.cwd(), dest + deletedFileName), function(err) {
					if (err) fis.log.warn(err);
					fis.log.info('clean success...');
				});
			}, 1000); //延时1秒清理
		}
		needClean = false;
	});
}

export = function(content: string, file: FisFile, options: any): string {
	if (!content) return '';

	if (!file.isHtmlLike) return content;

	if (!isInited) {
		readGlobalData(options.define);
		delete options.define;

		initEngine(options);
		isInited = true;
	}

	let data = readConfig(file);

	if (data['$release'] === false) {
		//如果不release,将文件丢到.deleted,并添加clean标记,在release:end后清除
		needClean = true;
		file.release = deletedFileName;
		return '';
	}

	if (data['$noParse'] === true) {
		return content;
	}

	data = mergeGlobalData(file.subpath, data);

	// 加入内置的file变量
	data['$file'] = file;
	data['$media'] = fis.project.currentMedia();

	let template: Template = marko.load(file.fullname, {
		writeToDisk: false
	});

	let str: string = template.renderToString(data);

	return str;
};
