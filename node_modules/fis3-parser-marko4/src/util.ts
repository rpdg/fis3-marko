import * as fs from "fs";
import * as path from "path";
//import * as jsonfile from "jsonfile";
import * as deepmerge from "deepmerge";


let globalConfigFile: string = fis.project.getProjectPath() + "/config.json";
let globalConfigFileExisted: boolean = fs.existsSync(globalConfigFile);

//使用全局变量是为了防止Obj也被递归
let Obj: KeyValueObject = {};


/**
 * 读取全局配置 config.json
 * @param definedData 在fis-conf.json 里定义的data
 */
export function readGlobalData(definedData: any = {}): any {
    let data: any;
    if (globalConfigFileExisted) {
		//let gCfgData = jsonfile.readFileSync(globalConfigFile);
		let gCfgData = fis.util.readJSON(globalConfigFile);
        data = deepmerge(definedData, gCfgData);
    }
    else {
        data = definedData;
    }

    reduceObject("", Obj, data);

    return data;
}

/**
 * 将数据降维展开
 * @param jsonPath 
 * @param targetObject 
 * @param srcObject 
 */
export function reduceObject(jsonPath: string, targetObject: any, srcObject: any): any {
    const targetDefaultPath = jsonPath.replace(/\/$/, "") + "/";
    if (targetObject[targetDefaultPath] === undefined) {
        targetObject[targetDefaultPath] = {};
    }

    for (let key in srcObject) {
        if (/\/$/.test(key)) {
            reduceObject(targetDefaultPath + key, targetObject, srcObject[key]);
        } else if (key.indexOf(".") > -1) {
            targetObject[targetDefaultPath + key] = srcObject[key];
        } else {
            targetObject[targetDefaultPath][key] = srcObject[key];
        }
    }
}


/**
 * 读取同名json配置
 * @param file 模板文件
 */
export function readConfig(file: FisFile): any {
    const jsonFile: string = file.realpathNoExt + ".json";

    let data: any;

    if (fs.existsSync(jsonFile)) {
		//data = jsonfile.readFileSync(jsonFile);
		data = fis.util.readJSON(jsonFile);
        file.cache.addDeps(jsonFile);
    } else {
        data = {};
        file.cache.addMissingDeps(jsonFile);
    }

    return data;
}

/**
 * 将全局data合并到单文件的data中
 * @param subpath 文件物理路径
 * @param localData 文件同名json的data
 * @param globalData 全局data
 */
export function mergeGlobalData(subpath: string, localData: any): any {
    let globalData = Obj;
    let mergeData = [];
    let props: string[] = [];
    let subs = subpath.split("/");
    for (let i = 0, l = subs.length; i < l; i++) {
        let p = (i ? props[i - 1] : "") + subs[i] + (i > l - 2 ? "" : "/");
        props.push(p);
    }

    for (let i = 0, l = props.length; i < l; i++) {
        let obj = globalData[props[i]];
        if (obj !== undefined) {
            mergeData.push(obj);
        }
    }

    mergeData.push(localData);

    let data = deepmerge.all(mergeData);

    return data;
}


export function getGlobalData() {
    return Obj;
};